import os
os.chdir("/Users/izaveliscek/Desktop")
my_path =os.path.abspath("/Users/izaveliscek/Desktop")

import Options
from Options import Option

import LM
from LM import LocalModel

import Lgr
from Lgr import LGR

import importlib
import numpy as np
from matplotlib import pyplot as plt



opt=Option(const=1.0,length=0.3,n_train=8,max_overlap=3)
def f(x):
	if x>0:
		return 20*np.exp(-0.2*x)
	else:
		return x*np.sin(x)

N=30
n=1000

np.random.seed(96)
X2 = np.atleast_2d([np.random.uniform(-30,30,N)]).T


vfun=np.vectorize(f)
y2=vfun(X2).reshape(N,)
dy = 0.0+ 0. * np.random.random(y2.shape)
noise = np.random.normal(0, dy)
y2 += noise
x=np.atleast_2d([np.linspace(-30,30,1000)]).T
model3=None
model3=LGR(opt,1)
model3.initialize_lm(X2,y2,dy**2)
#getting predictions
y_pred,sigma=model3.predict(x) #center, inf w
y_predO,sigmaO=model3.predict2(x) #center
y_pck2,sigmack2=model3.predict4(x) #closest point, inf w
centres=np.zeros(model3.M)
yp=np.zeros((model3.M,x.shape[0]))
sig=np.zeros((model3.M,x.shape[0]))
X_train=[]
Y_train=[]
ww=[]
wO=[]
wck2=[]
list_kernel=[]
for i in range(model3.M):
	centres[i]=model3.lmodels[i].center
	yy,si=model3.lmodels[i].predict_(x)
	yp[i]=yy
	xx=model3.lmodels[i].X
	sig[i]=si
	X_train.append(xx[:,0])
	yyy=model3.lmodels[i].Y
	Y_train.append(yyy)
	w2=model3.lmodels[i].get_wwold(x)
	w1=model3.lmodels[i].get_ww(x)
	w4=model3.lmodels[i].get_wpk2(x)
	ww.append(w1)
	wck2.append(w4)
	wO.append(w2)
	list_kernel.append(model3.lmodels[i].kernel)

ww=np.asarray(ww)
ww=ww.reshape(model3.M,n)
wck2=np.asarray(wck2)
wck2=wck2.reshape(model3.M,n)
wO=np.asarray(ww)
wO=ww.reshape(model3.M,n)
wtot=np.sum(ww,axis=0)
wtotcp=np.sum(wck2,axis=0)	
wtotO=np.sum(wO,axis=0)
ycentres=np.zeros(model3.M)

#plotting local models
fig = plt.figure()
fig.subplots_adjust(hspace=0.4, wspace=0.4)
for i in range(model3.M):
	ax = fig.add_subplot(model3.M, 1, i+1)
	ax.plot(x, yp[i], 'b-', label=u'Prediction')
	ax.plot(X_train[i], Y_train[i], 'r.', markersize=10, label=u'X_Train')
	ax.plot(x, vfun(x), 'r:', label=u'$f(x) = x\,\sin(x)$')
	ax.plot(centres[i],ycentres[i],'g.',markersize=10,label=u'Model centres')
	ax.set_xlabel('$x$')
	ax.set_ylabel('$f(x)$')
	ax.fill(np.concatenate([x, x[::-1]]),
          np.concatenate([yp[i] - 1.9600 * sig[i], 
	(yp[i] + 1.9600 * sig[i])[::-1]]),
          alpha=.5, fc='b', ec='None', label='95% confidence interval')
#fig.savefig(my_path + '/LocalModel_RandomSeed(2).png')
plt.show()
#Global prediction with local model center  weighting, inf w at training point
fig = plt.figure()
fig.subplots_adjust(hspace=0.4, wspace=0.4)
ax = fig.add_subplot(2, 1, 1)
ax.plot(x, vfun(x), 'r:', label=u'$f(x) = x\,\sin(x)$')
ax.plot(x, vfun(x), 'r:', label=u'$f(x) = 20 exp(-0.2*x)$')
ax.plot(centres,ycentres,'g.',markersize=8,label=u'Model centres')
ax.plot(X2, y2, 'r.', markersize=8, label=u'Observations')
ax.plot(x, y_pred, 'b-', label=u'Prediction')
ax.fill(np.concatenate([x, x[::-1]]),
          np.concatenate([y_pred - 1.9600 * sigma,
                         (y_pred+ 1.9600 * sigma)[::-1]]),
          alpha=.5, fc='b', ec='None', label='95% confidence interval')
ax.set_xlabel('$x$')
ax.set_ylabel('$f(x)$')
ax.set_ylim(-50, 50)
(-50, 50)
ax.set_title('Global prediction with local model center  weighting, inf w at training point' , fontdict=None, loc='center')
ax = fig.add_subplot(2, 1, 2)
for i in range(model3.M):
	ax.plot(x, ww[i,:]/wtot,label=u'%s ' %list_kernel[i])
	ax.plot(centres[i],ycentres[i],'.',markersize=10)
	ax.set_xlabel('$x$')
	ax.set_ylabel('$weights$')
	ax.legend(bbox_to_anchor=(1,0),  
                bbox_transform=fig.transFigure, ncol=3)
#fig.savefig(my_path + '/GlobalPredictionsCenter_RandomSeed(2).png')
plt.show()
                
#  Global prediction with local model center to prediction point used for whole kernel weighting
fig = plt.figure()
fig.subplots_adjust(hspace=0.4, wspace=0.4)
ax = fig.add_subplot(2, 1, 1)
ax.plot(x, vfun(x), 'r:', label=u'$f(x) = x\,\sin(x)$')
ax.plot(x, vfun(x), 'r:', label=u'$f(x) = 20 exp(-0.2*x)$')
ax.plot(centres,ycentres,'g.',markersize=8,label=u'Model centres')
ax.plot(X2, y2, 'r.', markersize=8, label=u'Observations')
ax.plot(x, y_predO, 'b-', label=u'Prediction')
ax.fill(np.concatenate([x, x[::-1]]),
          np.concatenate([y_predO - 1.9600 * sigmaO,
                         (y_predO+ 1.9600 * sigmaO)[::-1]]),
          alpha=.5, fc='b', ec='None', label='95% confidence interval')
ax.set_xlabel('$x$')
ax.set_ylabel('$f(x)$')
ax.set_ylim(-50, 50)
(-50, 50)
ax.set_title('Global prediction with local model center to prediction point used for whole kernel weighting' , fontdict=None, loc='center')
ax = fig.add_subplot(2, 1, 2)
for i in range(model3.M):
	ax.plot(x, wO[i,:]/wtotO,label=u'Model %s  weights' %i)
	ax.plot(centres[i],ycentres[i],'.',markersize=10,label=u'Model %s centres' %i)
	ax.set_xlabel('$x$')
	ax.set_ylabel('$weights$')
	ax.legend(bbox_to_anchor=(1,0),  
                bbox_transform=fig.transFigure, ncol=3)
#fig.savefig(my_path + '/GlobalCenterOld_RandomSeed(2).png')
plt.show()
#'Global prediction with closest training point to prediction point used for Matern kernel weighting
fig = plt.figure()
fig.subplots_adjust(hspace=0.4, wspace=0.4)
ax = fig.add_subplot(2, 1, 1)
ax.plot(x, vfun(x), 'r:', label=u'$f(x) = x\,\sin(x)$')
ax.plot(x, vfun(x), 'r:', label=u'$f(x) = 20 exp(-0.2*x)$')
ax.plot(centres,ycentres,'g.',markersize=8,label=u'Model centres')
ax.plot(X2, y2, 'r.', markersize=8, label=u'Observations')
ax.plot(x, y_pck2, 'b-', label=u'Prediction')
ax.fill(np.concatenate([x, x[::-1]]),
          np.concatenate([y_pck2 - 1.9600 * sigmack2,
                         (y_pck2+ 1.9600 * sigmack2)[::-1]]),
          alpha=.5, fc='b', ec='None', label='95% confidence interval')
ax.set_xlabel('$x$')
ax.set_ylabel('$f(x)$')
ax.set_ylim(-50, 50)
(-50, 50)
ax.set_title('Global prediction with closest training point to prediction point used for Matern kernel weighting' , fontdict=None, loc='center')
ax = fig.add_subplot(2, 1, 2)
for i in range(model3.M):
	ax.plot(x, wck2[i,:]/wtotcp,label=u'Model %s  weights' %i)
	ax.plot(centres[i],ycentres[i],'.',markersize=10,label=u'Model %s centres' %i)
	ax.set_xlabel('$x$')
	ax.set_ylabel('$weights$')
	ax.legend(bbox_to_anchor=(1,0),  
                bbox_transform=fig.transFigure, ncol=3)
#fig.savefig(my_path + '/GlobalPredictionsClosestPoint_RandomSeed(2).png')
plt.show()





